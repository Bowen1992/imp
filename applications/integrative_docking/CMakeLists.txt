# Autogenerated file, run tools/build/setup_cmake.py to regenerate

imp_get_process_exit_code("setup_application integrative_docking" status ${PROJECT_BINARY_DIR}
                          COMMAND ${PROJECT_SOURCE_DIR}/tools/build/setup_application.py
                          --name=integrative_docking
                          --datapath=${IMP_DATAPATH}
                           --source=${PROJECT_SOURCE_DIR})
if(${status} EQUAL 0)
message("Application IMP.integrative_docking ok")
include_directories(${ANN_INCLUDE_PATH}
        ${BOOST.FILESYSTEM_INCLUDE_PATH}
        ${BOOST.PROGRAMOPTIONS_INCLUDE_PATH}
        ${BOOST.RANDOM_INCLUDE_PATH}
        ${BOOST.REGEX_INCLUDE_PATH}
        ${BOOST.SYSTEM_INCLUDE_PATH}
        ${CGAL_INCLUDE_PATH}
        ${GPERFTOOLS_INCLUDE_PATH}
        ${LOG4CXX_INCLUDE_PATH}
        ${TCMALLOC_HEAPCHECKER_INCLUDE_PATH}
        ${TCMALLOC_HEAPPROFILER_INCLUDE_PATH} ${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/lib
     ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em2d_dock/lib
     ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/lib
     ${PROJECT_SOURCE_DIR}/applications/integrative_docking/foxsdock/lib
     ${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/lib)
link_directories(${ANN_LINK_PATH}
        ${BOOST.FILESYSTEM_LINK_PATH}
        ${BOOST.PROGRAMOPTIONS_LINK_PATH}
        ${BOOST.RANDOM_LINK_PATH}
        ${BOOST.REGEX_LINK_PATH}
        ${BOOST.SYSTEM_LINK_PATH}
        ${CGAL_LINK_PATH}
        ${GPERFTOOLS_LINK_PATH}
        ${LOG4CXX_LINK_PATH}
        ${TCMALLOC_HEAPCHECKER_LINK_PATH}
        ${TCMALLOC_HEAPPROFILER_LINK_PATH})


   add_executable("combine_scores" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/combine_scores/combine_scores.cpp)
   target_link_libraries(combine_scores
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(combine_scores PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS combine_scores DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} combine_scores)


   add_executable("recompute_zscore" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/combine_scores/recompute_zscore.cpp)
   target_link_libraries(recompute_zscore
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(recompute_zscore PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS recompute_zscore DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} recompute_zscore)


   add_executable("cross_links_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/cross_links_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/lib/CrossLink.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/lib/helpers.cpp)
   target_link_libraries(cross_links_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(cross_links_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS cross_links_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} cross_links_score)


   add_executable("interface_cross_links" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/interface_cross_links.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/lib/CrossLink.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/cross_linking/lib/helpers.cpp)
   target_link_libraries(interface_cross_links
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(interface_cross_links PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS interface_cross_links DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} interface_cross_links)


   add_executable("em2d_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em2d_dock/em2d_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em2d_dock/lib/Projection.cpp)
   target_link_libraries(em2d_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(em2d_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS em2d_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} em2d_score)


   add_executable("em2d_single_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em2d_dock/em2d_single_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em2d_dock/lib/Projection.cpp)
   target_link_libraries(em2d_single_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(em2d_single_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS em2d_single_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} em2d_single_score)


   add_executable("em3d_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/em3d_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/lib/EMFit.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/lib/MapScorer.cpp)
   target_link_libraries(em3d_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(em3d_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS em3d_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} em3d_score)


   add_executable("em3d_single_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/em3d_single_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/lib/EMFit.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/em3d_dock/lib/MapScorer.cpp)
   target_link_libraries(em3d_single_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(em3d_single_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS em3d_single_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} em3d_single_score)


   add_executable("saxs_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/foxsdock/saxs_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/foxsdock/lib/helpers.cpp)
   target_link_libraries(saxs_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(saxs_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS saxs_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} saxs_score)


   add_executable("interface_rtc" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/interface_rtc.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/lib/ResidueContent.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/lib/helpers.cpp)
   target_link_libraries(interface_rtc
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(interface_rtc PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS interface_rtc DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} interface_rtc)


   add_executable("nmr_rtc_score" ${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/nmr_rtc_score.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/lib/ResidueContent.cpp
${PROJECT_SOURCE_DIR}/applications/integrative_docking/nmr_rtc/lib/helpers.cpp)
   target_link_libraries(nmr_rtc_score
    ${IMP_EM_LIBRARY}
${IMP_SAXS_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_STATISTICS_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
${IMP_ATOM_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES}
${BOOST.REGEX_LIBRARIES})
   set_target_properties(nmr_rtc_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS nmr_rtc_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} nmr_rtc_score)

add_custom_target("IMP.integrative_docking" ALL DEPENDS ${bins})


set(pybins ${PROJECT_SOURCE_DIR}/applications/integrative_docking/idock.py)
foreach (pybin ${pybins})
  install(PROGRAMS ${pybin} DESTINATION ${CMAKE_INSTALL_BINDIR})
endforeach(pybin)

set(pytests ${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_combine_scores.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_cross_links.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_em2d_dock.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_em3d_dock.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_foxsdock.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_idock.py
${PROJECT_SOURCE_DIR}/applications/integrative_docking/test/test_nmr_rtc.py)
foreach (test ${pytests})
  GET_FILENAME_COMPONENT(name ${test} NAME)
  add_test("integrative_docking.${name}" ${IMP_TEST_SETUP} python ${test})
  set_tests_properties("integrative_docking.${name}" PROPERTIES LABELS "IMP.integrative_docking;test")
endforeach(test)

if(DOXYGEN_FOUND)
# documentation

file(GLOB docs ${PROJECT_SOURCE_DIR}/applications/integrative_docking/*.dox
               ${PROJECT_SOURCE_DIR}/applications/integrative_docking/*.md)

add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/doxygen/integrative_docking/tags ${PROJECT_BINARY_DIR}/doc/html/integrative_docking/index.html
   COMMAND mkdir -p doc/html
   COMMAND ${DOXYGEN_EXECUTABLE} ../../doxygen/integrative_docking/Doxyfile
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_patch_tags.py --module=integrative_docking --file=../../doxygen/integrative_docking/tags
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_show_warnings.py --warn=../../doxygen/integrative_docking/warnings.txt
   DEPENDS ${IMP_EM_DOC}
${IMP_SAXS_DOC}
${IMP_BASE_DOC}
${IMP_CGAL_DOC}
${IMP_ALGEBRA_DOC}
${IMP_KERNEL_DOC}
${IMP_DISPLAY_DOC}
${IMP_SCORE_FUNCTOR_DOC}
${IMP_STATISTICS_DOC}
${IMP_CORE_DOC}
${IMP_CONTAINER_DOC}
${IMP_ATOM_DOC} ${docs}
   WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doxygen/integrative_docking/
   COMMENT "Running doxygen on integrative_docking")

add_custom_target("IMP.integrative_docking-doc" ALL DEPENDS ${PROJECT_BINARY_DIR}/doxygen/integrative_docking/tags)

set(IMP_INTEGRATIVE_DOCKING_DOC "IMP.integrative_docking-doc" CACHE INTERNAL "" FORCE)

set(IMP_DOC_DEPENDS ${IMP_DOC_DEPENDS} ${IMP_INTEGRATIVE_DOCKING_DOC} CACHE INTERNAL "" FORCE)
endif(DOXYGEN_FOUND)

elseif(${status} EQUAL 1)
message("Application integrative_docking disabled")
else()
message(FATAL_ERROR "setup_application failed ${status}")
endif()
