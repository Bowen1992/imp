# Autogenerated file, run tools/build/setup_cmake.py to regenerate

imp_get_process_exit_code("setup_application ligand_score" status ${PROJECT_BINARY_DIR}
                          COMMAND ${PROJECT_SOURCE_DIR}/tools/build/setup_application.py
                          --name=ligand_score
                          --datapath=${IMP_DATAPATH}
                           --source=${PROJECT_SOURCE_DIR})
if(${status} EQUAL 0)
message("Application IMP.ligand_score ok")
include_directories(${ANN_INCLUDE_PATH}
        ${BOOST.FILESYSTEM_INCLUDE_PATH}
        ${BOOST.PROGRAMOPTIONS_INCLUDE_PATH}
        ${BOOST.RANDOM_INCLUDE_PATH}
        ${BOOST.REGEX_INCLUDE_PATH}
        ${BOOST.SYSTEM_INCLUDE_PATH}
        ${CGAL_INCLUDE_PATH}
        ${GPERFTOOLS_INCLUDE_PATH}
        ${LOG4CXX_INCLUDE_PATH}
        ${TCMALLOC_HEAPCHECKER_INCLUDE_PATH}
        ${TCMALLOC_HEAPPROFILER_INCLUDE_PATH} )
link_directories(${ANN_LINK_PATH}
        ${BOOST.FILESYSTEM_LINK_PATH}
        ${BOOST.PROGRAMOPTIONS_LINK_PATH}
        ${BOOST.RANDOM_LINK_PATH}
        ${BOOST.REGEX_LINK_PATH}
        ${BOOST.SYSTEM_LINK_PATH}
        ${CGAL_LINK_PATH}
        ${GPERFTOOLS_LINK_PATH}
        ${LOG4CXX_LINK_PATH}
        ${TCMALLOC_HEAPCHECKER_LINK_PATH}
        ${TCMALLOC_HEAPPROFILER_LINK_PATH})


   add_executable("ligand_score" ${PROJECT_SOURCE_DIR}/applications/ligand_score/ligand_score.cpp)
   target_link_libraries(ligand_score
    ${IMP_ATOM_LIBRARY}
${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
${IMP_CORE_LIBRARY}
${IMP_CONTAINER_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.REGEX_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES})
   set_target_properties(ligand_score PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
   install(TARGETS ligand_score DESTINATION ${CMAKE_INSTALL_BINDIR})
   set(bins ${bins} ligand_score)

add_custom_target("IMP.ligand_score" ALL DEPENDS ${bins})


set(pybins )
foreach (pybin ${pybins})
  install(PROGRAMS ${pybin} DESTINATION ${CMAKE_INSTALL_BINDIR})
endforeach(pybin)

set(pytests ${PROJECT_SOURCE_DIR}/applications/ligand_score/test/test_ligand_score.py)
foreach (test ${pytests})
  GET_FILENAME_COMPONENT(name ${test} NAME)
  add_test("ligand_score.${name}" ${IMP_TEST_SETUP} python ${test})
  set_tests_properties("ligand_score.${name}" PROPERTIES LABELS "IMP.ligand_score;test")
endforeach(test)

if(DOXYGEN_FOUND)
# documentation
add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/doxygen/ligand_score/tags ${PROJECT_BINARY_DIR}/doc/html/ligand_score/index.html
   COMMAND mkdir -p doc/html
   COMMAND ${DOXYGEN_EXECUTABLE} ../../doxygen/ligand_score/Doxyfile
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_patch_tags.py --module=ligand_score --file=../../doxygen/ligand_score/tags
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_show_warnings.py --warn=../../doxygen/ligand_score/warnings.txt
   DEPENDS ${PROJECT_BINARY_DIR}/doxygen/atom/tags
${PROJECT_BINARY_DIR}/doxygen/base/tags
${PROJECT_BINARY_DIR}/doxygen/cgal/tags
${PROJECT_BINARY_DIR}/doxygen/algebra/tags
${PROJECT_BINARY_DIR}/doxygen/kernel/tags
${PROJECT_BINARY_DIR}/doxygen/display/tags
${PROJECT_BINARY_DIR}/doxygen/score_functor/tags
${PROJECT_BINARY_DIR}/doxygen/core/tags
${PROJECT_BINARY_DIR}/doxygen/container/tags
   WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doxygen/ligand_score/
   COMMENT "Running doxygen on ligand_score")

add_custom_target("IMP.ligand_score-doc" ALL DEPENDS ${PROJECT_BINARY_DIR}/doxygen/ligand_score/tags)

set(IMP_DOC_DEPENDS ${IMP_DOC_DEPENDS} "IMP.ligand_score-doc" CACHE INTERNAL "" FORCE)
endif(DOXYGEN_FOUND)

elseif(${status} EQUAL 1)
message("Application ligand_score disabled")
else()
message(FATAL_ERROR "setup_application failed ${status}")
endif()
