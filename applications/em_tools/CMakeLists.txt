# Autogenerated file, run tools/build/setup_cmake.py to regenerate

imp_get_process_exit_code("setup_application em_tools" status ${PROJECT_BINARY_DIR}
                          COMMAND ${PROJECT_SOURCE_DIR}/tools/build/setup_application.py
                          --name=em_tools
                          --datapath=${IMP_DATAPATH}
                           --source=${PROJECT_SOURCE_DIR})
if(${status} EQUAL 0)
message("Application IMP.em_tools ok")
include_directories(${ANN_INCLUDE_PATH}
        ${BOOST.FILESYSTEM_INCLUDE_PATH}
        ${BOOST.PROGRAMOPTIONS_INCLUDE_PATH}
        ${BOOST.RANDOM_INCLUDE_PATH}
        ${BOOST.REGEX_INCLUDE_PATH}
        ${BOOST.SYSTEM_INCLUDE_PATH}
        ${CGAL_INCLUDE_PATH}
        ${GPERFTOOLS_INCLUDE_PATH}
        ${LOG4CXX_INCLUDE_PATH}
        ${TCMALLOC_HEAPCHECKER_INCLUDE_PATH}
        ${TCMALLOC_HEAPPROFILER_INCLUDE_PATH} )
link_directories(${ANN_LINK_PATH}
        ${BOOST.FILESYSTEM_LINK_PATH}
        ${BOOST.PROGRAMOPTIONS_LINK_PATH}
        ${BOOST.RANDOM_LINK_PATH}
        ${BOOST.REGEX_LINK_PATH}
        ${BOOST.SYSTEM_LINK_PATH}
        ${CGAL_LINK_PATH}
        ${GPERFTOOLS_LINK_PATH}
        ${LOG4CXX_LINK_PATH}
        ${TCMALLOC_HEAPCHECKER_LINK_PATH}
        ${TCMALLOC_HEAPPROFILER_LINK_PATH})


add_custom_target("IMP.em_tools" ALL DEPENDS ${bins})


set(pybins ${PROJECT_SOURCE_DIR}/applications/em_tools/estimate_threshold_from_molecular_mass.py
${PROJECT_SOURCE_DIR}/applications/em_tools/map2pca.py
${PROJECT_SOURCE_DIR}/applications/em_tools/mol2pca.py
${PROJECT_SOURCE_DIR}/applications/em_tools/resample_density.py
${PROJECT_SOURCE_DIR}/applications/em_tools/simulate_density_from_pdb.py
${PROJECT_SOURCE_DIR}/applications/em_tools/view_density_header.py)
foreach (pybin ${pybins})
  install(PROGRAMS ${pybin} DESTINATION ${CMAKE_INSTALL_BINDIR})
endforeach(pybin)

set(pytests ${PROJECT_SOURCE_DIR}/applications/em_tools/test/test_em_tools.py)
foreach (test ${pytests})
  GET_FILENAME_COMPONENT(name ${test} NAME)
  add_test("em_tools.${name}" ${IMP_TEST_SETUP} python ${test})
  set_tests_properties("em_tools.${name}" PROPERTIES LABELS "IMP.em_tools;test")
endforeach(test)

if(DOXYGEN_FOUND)
# documentation
add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/doxygen/em_tools/tags ${PROJECT_BINARY_DIR}/doc/html/em_tools/index.html
   COMMAND mkdir -p doc/html
   COMMAND ${DOXYGEN_EXECUTABLE} ../../doxygen/em_tools/Doxyfile
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_patch_tags.py --module=em_tools --file=../../doxygen/em_tools/tags
   COMMAND ${PROJECT_SOURCE_DIR}/tools/build/doxygen_show_warnings.py --warn=../../doxygen/em_tools/warnings.txt
   DEPENDS ${PROJECT_BINARY_DIR}/doxygen/em/tags
${PROJECT_BINARY_DIR}/doxygen/base/tags
${PROJECT_BINARY_DIR}/doxygen/cgal/tags
${PROJECT_BINARY_DIR}/doxygen/algebra/tags
${PROJECT_BINARY_DIR}/doxygen/kernel/tags
${PROJECT_BINARY_DIR}/doxygen/display/tags
${PROJECT_BINARY_DIR}/doxygen/score_functor/tags
${PROJECT_BINARY_DIR}/doxygen/statistics/tags
${PROJECT_BINARY_DIR}/doxygen/core/tags
${PROJECT_BINARY_DIR}/doxygen/container/tags
${PROJECT_BINARY_DIR}/doxygen/atom/tags
   WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doxygen/em_tools/
   COMMENT "Running doxygen on em_tools")

set(IMP_em_tools_DOC ${PROJECT_BINARY_DIR}/doxygen/em_tools/tags CACHE INTERNAL "" FORCE)

add_custom_target("IMP.em_tools-doc" ALL DEPENDS ${PROJECT_BINARY_DIR}/doxygen/em_tools/tags)

set(IMP_DOC_DEPENDS ${IMP_DOC_DEPENDS} "IMP.em_tools-doc" CACHE INTERNAL "" FORCE)
endif(DOXYGEN_FOUND)

elseif(${status} EQUAL 1)
message("Application em_tools disabled")
else()
message(FATAL_ERROR "setup_application failed ${status}")
endif()
