import StringIO
import IMP
import IMP.test
import IMP.atom

class Tests(IMP.test.TestCase):
    def _get_index(self, l):
        h=IMP.atom.Hierarchy(l[0])
        p= IMP.atom.Residue(h.get_parent())
        return p.get_index()
    def test_trivial(self):
        """Trivial selection test"""
        m = IMP.Model()
        ri = m.add_particle("root")
        rh = IMP.atom.Hierarchy.setup_particle(m, ri)
        ci = m.add_particle("child")
        ch = IMP.atom.Hierarchy.setup_particle(m, ci)
        rh.add_child(ch)
        cr = IMP.core.XYZR.setup_particle(m, ci, IMP.algebra.get_unit_sphere_3d())
        cm = IMP.atom.Mass.setup_particle(m, ci, 1)
        s = IMP.atom.Selection([rh])
        self.assertEqual(s.get_selected_particle_indexes(), [ci])
    def test_one(self):
        """Test selection of N and C termini"""
        IMP.base.set_log_level(IMP.base.SILENT)
        m= IMP.Model()
        h= IMP.atom.read_pdb(self.open_input_file("mini.pdb"), m)
        cterm= IMP.atom.Selection(h, terminus=IMP.atom.Selection.C)
        nterm= IMP.atom.Selection(h, terminus=IMP.atom.Selection.N)
        print cterm.get_selected_particles()
        print nterm.get_selected_particles()
        self.assertEqual(len(cterm.get_selected_particle_indexes()), 1)
        self.assertEqual(len(nterm.get_selected_particle_indexes()), 1)
        self.assertEqual(self._get_index(cterm.get_selected_particles()), 440)
        self.assertEqual(self._get_index(nterm.get_selected_particles()), 432)
    def test_atom_type(self):
        """Test selection of CA atoms"""
        IMP.base.set_log_level(IMP.base.SILENT)
        m= IMP.Model()
        h= IMP.atom.read_pdb(self.open_input_file("mini.pdb"), m)
        ca= IMP.atom.Selection(h, atom_type=IMP.atom.AT_CA)
        self.assertEqual(len(ca.get_selected_particle_indexes()), 9)
        ri= IMP.atom.Selection(h, residue_indexes=[436,437])
        self.assertEqual(len(ri.get_selected_particle_indexes()), 18)
    def test_two(self):
        """Test simple selection of N and C termini"""
        IMP.base.set_log_level(IMP.base.VERBOSE)
        m= IMP.kernel.Model()
        ri = m.add_particle("root")
        rh = IMP.atom.Hierarchy.setup_particle(m, ri)
        ci = m.add_particle("chain")
        cc = IMP.atom.Chain.setup_particle(m, ci, "A")
        rh.add_child(cc)
        nti = m.add_particle("n")
        nth = IMP.atom.Hierarchy.setup_particle(m, nti)
        ntr = IMP.core.XYZR.setup_particle(m, nti, IMP.algebra.get_unit_sphere_3d())
        ntm = IMP.atom.Mass.setup_particle(m, nti, 1)
        cc.add_child(nth)
        cti = m.add_particle("c")
        cth = IMP.atom.Hierarchy.setup_particle(m, cti)
        ntr = IMP.core.XYZR.setup_particle(m, cti, IMP.algebra.get_unit_sphere_3d())
        ntm = IMP.atom.Mass.setup_particle(m, cti, 1)
        cc.add_child(cth)
        cs = IMP.atom.Selection([rh], terminus = IMP.atom.Selection.C)
        self.assertEqual(cs.get_selected_particle_indexes(), [cti])
        ns = IMP.atom.Selection([rh], terminus = IMP.atom.Selection.N)
        self.assertEqual(ns.get_selected_particle_indexes(), [nti])
    def test_mixed_coordinates(self):
        """Test a selection when only some have coordinates"""
        IMP.base.set_log_level(IMP.base.VERBOSE)
        m = IMP.Model()
        h = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("root"))
        c0 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child0"))
        c1 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child1"))
        c2 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child2"))
        IMP.atom.Mass.setup_particle(c2, 1)
        h.add_child(c0)
        c0.add_child(c1)
        c1.add_child(c2)
        d0 = IMP.core.XYZR.setup_particle(c0)
        d0.set_radius(10)
        d2 = IMP.core.XYZR.setup_particle(c2)
        d2.set_radius(1)
        self.assert_(h.get_is_valid(True))
        s = IMP.atom.Selection([h])
        ps = s.get_selected_particle_indexes()
        self.assertEqual(ps, [c2.get_particle_index()])
    def test_radius(self):
        """Test a selection on radius"""
        IMP.base.set_log_level(IMP.base.VERBOSE)
        m = IMP.Model()
        h = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("root"))
        c0 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child0"))
        c1 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child1"))
        c2 = IMP.atom.Hierarchy.setup_particle(m, m.add_particle("child2"))
        IMP.atom.Mass.setup_particle(c2, 1)
        h.add_child(c0)
        c0.add_child(c1)
        c1.add_child(c2)
        d0 = IMP.core.XYZR.setup_particle(c0)
        d0.set_radius(10)
        d1 = IMP.core.XYZR.setup_particle(c1)
        d1.set_radius(5)
        d2 = IMP.core.XYZR.setup_particle(c2)
        d2.set_radius(1)
        self.assert_(h.get_is_valid(True))
        s = IMP.atom.Selection([h], target_radius=4)
        ps = s.get_selected_particle_indexes()
        self.assertEqual(ps, [c1.get_particle_index()])
if __name__ == '__main__':
    IMP.test.main()
